{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AymanNb\\\\react\\\\src\\\\Exercice\\\\Hooks\\\\UseState\\\\EX2\\\\toggleTexte.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ToggleText() {\n  _s();\n  // Initialisation de l'état avec la valeur \"Bonjour\"\n  const [toggle, setToggle] = useState(\"Bonjour\");\n\n  // Fonction pour basculer entre \"Bonjour\" et \"Bonsoir\"\n  const tog = () => {\n    setToggle(prevToggle => prevToggle === \"Bonjour\" ? \"Bonsoir\" : \"Bonjour\" //condition ? valeur_si_vrai : valeur_si_faux;\n    );\n  };\n\n  // Retourne le bouton et le texte actuel\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: toggle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: tog,\n      children: \"Changer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n}\n_s(ToggleText, \"6Y1aJo6V4vdAtL37gQnGJkYL/CY=\");\n_c = ToggleText;\nexport default function App() {\n  return /*#__PURE__*/_jsxDEV(ToggleText, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 10\n  }, this);\n}\n\n/*  tog utilise la fonction setToggle pour changer l'état.\r\n Elle vérifie la valeur actuelle de toggle avec une fonction de rappel \r\n (prevToggle) =>, puis alterne entre \"Bonjour\" et \"Bonsoir\". */\n_c2 = App;\nvar _c, _c2;\n$RefreshReg$(_c, \"ToggleText\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ToggleText","_s","toggle","setToggle","tog","prevToggle","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","App","_c2","$RefreshReg$"],"sources":["C:/Users/AymanNb/react/src/Exercice/Hooks/UseState/EX2/toggleTexte.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction ToggleText() {\r\n  // Initialisation de l'état avec la valeur \"Bonjour\"\r\n  const [toggle, setToggle] = useState(\"Bonjour\");\r\n\r\n  // Fonction pour basculer entre \"Bonjour\" et \"Bonsoir\"\r\n  const tog = () => {\r\n    setToggle((prevToggle) =>\r\n      prevToggle === \"Bonjour\" ? \"Bonsoir\" : \"Bonjour\"//condition ? valeur_si_vrai : valeur_si_faux;\r\n    );\r\n  };\r\n\r\n  // Retourne le bouton et le texte actuel\r\n  return (\r\n    <div>\r\n      <p>{toggle}</p>\r\n      <button onClick={tog}>Changer</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function App() {\r\n  return <ToggleText />;\r\n}\r\n\r\n/*  tog utilise la fonction setToggle pour changer l'état.\r\n Elle vérifie la valeur actuelle de toggle avec une fonction de rappel \r\n (prevToggle) =>, puis alterne entre \"Bonjour\" et \"Bonsoir\". */\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB;EACA,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGN,QAAQ,CAAC,SAAS,CAAC;;EAE/C;EACA,MAAMO,GAAG,GAAGA,CAAA,KAAM;IAChBD,SAAS,CAAEE,UAAU,IACnBA,UAAU,KAAK,SAAS,GAAG,SAAS,GAAG,SAAS;IAClD,CAAC;EACH,CAAC;;EAED;EACA,oBACEN,OAAA;IAAAO,QAAA,gBACEP,OAAA;MAAAO,QAAA,EAAIJ;IAAM;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACfX,OAAA;MAAQY,OAAO,EAAEP,GAAI;MAAAE,QAAA,EAAC;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnC,CAAC;AAEV;AAACT,EAAA,CAlBQD,UAAU;AAAAY,EAAA,GAAVZ,UAAU;AAoBnB,eAAe,SAASa,GAAGA,CAAA,EAAG;EAC5B,oBAAOd,OAAA,CAACC,UAAU;IAAAO,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACvB;;AAEA;AACA;AACA;AAFAI,GAAA,GAJwBD,GAAG;AAAA,IAAAD,EAAA,EAAAE,GAAA;AAAAC,YAAA,CAAAH,EAAA;AAAAG,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}