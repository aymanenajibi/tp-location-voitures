//TODO ---  Composant qui initialise le state a partie de l'api --- 

    /* 
        * âœ… useState â†’ Permet de gÃ©rer lâ€™Ã©tat des voitures.
        * âœ… useEffect â†’ ExÃ©cute du code quand le composant est montÃ© (pour rÃ©cupÃ©rer les voitures depuis l'API).
        * âœ… Voiture â†’ Composant qui affiche une voiture sous forme de ligne dans un tableau.
        * âœ… AjouterVoiture â†’ Composant pour ajouter une voiture.
    */

import React, { useState , useEffect } from "react";
import Voiture from "./Voiture";
import AjouterVoiture from "./AjouterVoiture";




export default function ListeVoitures() { 
    const [voitures, setVoitures] = useState([]);
    
    
    /* 
       * âœ… fetch("http://localhost:5000/voitures") â†’ Envoie une requÃªte HTTP pour rÃ©cupÃ©rer la liste des voitures.
       * âœ… response.json() â†’ Convertit la rÃ©ponse de lâ€™API en format JSON.
       * âœ… setVoitures(data.voitures) â†’ Met Ã  jour lâ€™Ã©tat voitures avec les donnÃ©es reÃ§ues. 
    */
    useEffect(() => {
        fetch("https://api-htb9.vercel.app/voitures")
            .then(response => response.json())
            .then(data => {
                console.log("DonnÃ©es reÃ§ues:", data.voitures); // VÃ©rification
                setVoitures(data.voitures);
            })
            .catch(error => console.error("Erreur lors du chargement des voitures :", error));
    }, []);
    
    

    /* 
        * âœ… window.confirm(...) â†’ Affiche une boÃ®te de confirmation avant la suppression.
        * âœ… .filter(...) â†’ CrÃ©e une nouvelle liste sans la voiture sÃ©lectionnÃ©e.
        * ðŸ”¥ Supprimer une voiture via API
    */
    const handleDelete = (id) => {
        if (window.confirm("Voulez-vous vraiment supprimer cete voiture ? ")) {
            fetch(`https://api-htb9.vercel.app/voitures/${id}`, {
                method: "DELETE",
            })
                .then(() => {
                    setVoitures(voitures.filter((voiture) => voiture.id !== id)); //* âœ… Supprime la voiture de la liste
                })
                .catch(error => console.error("Erreur lors de la suppression de la voiture :", error));
        }
    };
    

    /*   
        * âœ… handleAjout(nouvelleVoiture) â†’ Ajoute une nouvelle voiture Ã  la liste.
        * âœ… [...voitures, nouvelleVoiture] â†’ Copie les anciennes voitures et ajoute la nouvelle Ã  la fin.
        * ðŸ”¥ Ajouter une voiture via API
    */
    const handleAjoute = (nouvelleVoiture) => {
        fetch("https://api-htb9.vercel.app/voitures", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(nouvelleVoiture),
        })
            .then(response => response.json())
            .then((date) => {
                setVoitures([...voitures, date]); //* âœ… Ajoute la nouvelle voiture Ã  la liste
            })
            .catch(error => console.error("Erreur lors de l'ajout de la voiture :", error));
    };
    


    /*
        * âœ… handleModifier(voitureModifier) â†’ Met Ã  jour les informations d'une voiture.
        * âœ… .map(...) â†’ Parcourt la liste des voitures et remplace la voiture modifiÃ©e.
        * ðŸ”¥ Modifier une voiture via API
    */
    const handleModifier = (voitureModifier) => {
        fetch(`https://api-htb9.vercel.app/voitures/${voitureModifier.id}`, {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(voitureModifier),
        })
        .then(() => {
                setVoitures(voitures.map((voiture) => (
                    voiture.id === voitureModifier.id
                        ? voitureModifier
                        : voiture
                ))); //* âœ… Met Ã  jour la voiture dans la liste
            })
        .catch(error => console.error("Erreur lors de la modification de la voiture :", error));
    };




    return (
        <div>
            <AjouterVoiture onAjout={handleAjoute} />
            <h2>Liste des voitures</h2>
            <table border="1">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>Marque</th>
                        <th>Type Voiture</th>
                        <th>Type Carburant</th>
                        <th>Discount</th>
                        <th>Prix de location</th>
                        <th>Image</th>
                        <th>Operation</th>
                    </tr>
                </thead>
                <tbody>
                    {voitures.map((voiture , index) => (
                        <Voiture voituree={voiture} key={voiture.id || index} supprimer={handleDelete} modifier={handleModifier} />
                    ))}
                </tbody>
            </table>
        </div>
    );
}